/*

	!! Предлагаемый расчет

	Реальное значение датчика (мв)   = D
	Запоминаем значение 0%           = X
	Запоминаем значение 20,9%        = Y

	Порядок расчета.

	1. Y-X =Z
	2. Z / 20,9 = W
	3. D-X =L
	4. L / W= S искомое значение

	Пример 1
	Х = 6 мв У = 520 мв D= 419

	1.  Z = 520-6 =514
	2.  W = 419/20,9 =20,05
	3.  L = 419-6 = 413
	4.  S = 413/20,5= 20,59%

	Пример 2.
	X= 3 mv  Y= 430 mv  D= 9 mv

	1.  Z= 430- 3 = 427
	2.  W= 427 / 20,9 = 20,43
	3.  L= 9-3= 6
	4.  S = 6 /20,43= 0,29%


*/


#include "Sensor.h"
#include "Configuration_ESP32.h"
#include "Settings.h"
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
float proportion(float x, float in_min, float in_max, float out_min, float out_max) 
{
	/*
	Порядок расчета.
	Реальное значение датчика (мв)  = D (float x)
	Запоминаем значение 0%          = X (float in_min)
	Запоминаем значение 20,9%       = Y (float in_max)
	1. Y-X =Z
	2. Z / 20,9 = W
	3. D-X =L
	4. L / W= S искомое значение


		Пример 1
	Х = 6 мв У = 520 мв D= 419

	1.  Z = 520-6 =514
	2.  W = 419/20,9 =20,05
	3.  L = 419-6 = 413
	4.  S = 413/20,5= 20,15%

		Пример 2.
	X= 3 mv  Y= 430 mv  D= 9 mv

	1.  Z= 430- 3 = 427
	2.  W= 427 / 20,9 = 20,43
	3.  L= 9-3= 6
	4.  S = 6 /20,43= 0,29%


  */

	float Z = in_max - in_min; // 1. Y-X =Z
	float W = Z / out_max;     // 2. Z / 20,9 = W
	float L = x - in_min;      // 3. D-X =L
	float S = L / W;           // 4. L / W= S искомое значение

	/*
	Serial.print("Z - ");
	Serial.println(Z);
	
	Serial.print("W - ");
	Serial.println(W);
	
	Serial.print("L - ");
	Serial.println(L);

	Serial.print("return S - ");
	Serial.println(S);
	*/
	return S;
}
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
SensorClass Sensor;
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
SensorClass::SensorClass()
{
  
}
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
void SensorClass::setup()
{
  
}
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
uint16_t SensorClass::read()
{
	int ADCVal = 0;
	int ADCRef = 0;
	int ADC_count = 10;


	for (int i = 0; i < ADC_count; i++)  // выполним несколько замеров для верности
	{
		ADCVal += analogRead(SENSOR_PIN);
	}

	ADCVal = ADCVal / ADC_count;                         // Получить исходное напряжение на входе микроконтроллера
	//reference_voltage = Settings.GetReference_voltage(); // Получить величину опорного напряжения из памяти
	//ADCRef = ADCVal - reference_voltage;                 // Вычесть величину опорного из полученного сигнала
	//if (ADCRef < 0)  ADCRef = 0;                         // Если результат меньше нуля
	Serial.print("Sensor analog ... ");
	Serial.println(ADCVal);

  return ADCVal;                                         // Вернуть напряжение с датчика за вычетом опорного
}
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
uint16_t SensorClass::readRef()
{
	int ADCVal = 0;
	int ADC_count = 10;


	for (int i = 0; i < ADC_count; i++)  // выполним несколько замеров для верности
	{
		ADCVal += analogRead(SENSOR_PIN);
	}
	ADCVal= ADCVal / ADC_count;
	Serial.print("Sensor analog ... ");
	Serial.println(ADCVal);
	return ADCVal;
}
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------
SensorData SensorClass::compute()
{
 
	//Serial.println("Sensor compute ... ");

	float val = read();                                    // Реальное значение датчика (мв) = D

	//float zeroPercents = 0;// Settings.Get0_O2Value();     // Запоминаем значение 0%         = X
	//float maxPercents = 0;// Settings.Get20_9_O2Value();   // Запоминаем значение 20, 9 %    = Y

	//if (val < zeroPercents)                          // ограничиваем минимальное значение равным нулевому калиброванному значению
	//{
	//	val = zeroPercents;
	//}


	float voltagePa = ((val * 3.3) / 4096)/* * 2.46*/;  // Напряжение питания  






	/* Пример 1*/
  //float val = 519.0;                               // Реальное значение датчика (мв) = D
  //float zeroPercents = 6.00;                       // Запоминаем значение 0%         = X
  //float maxPercents = 520.0;                       // Запоминаем значение 20, 9 %    = Y

  // пропорция: zeroPercents - 0% o2, maxPercents - 20.9% o2
 /* float computed = 0.0f;*/
  SensorData data;
  data.HasValue = false;

 // if(maxPercents > 0 && maxPercents > zeroPercents) // рассчитываем, только если заданы калибровочные коэффициенты, и один больше другого (защита от дурака)
 // {
 //   computed = proportion(val,zeroPercents,maxPercents,0.0f, 20.9);
 //   
	//if (computed > 21) // ограничиваем максимальное значение сверху, 21% O2
	//{
	//	computed = 21;
	//}
    data.HasValue = true;
 // }

  uint32_t computedU = voltagePa *100;

  
  data.Value = computedU/100;
  data.Fract = computedU%100;
  
  
  return data;
}
//-------------------------------------------------------------------------------------------------------------------------------------------------------------------------


