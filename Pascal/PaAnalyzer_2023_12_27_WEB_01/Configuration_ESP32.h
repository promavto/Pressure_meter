#pragma once

#include "TinyVector.h"


//--------------------------------------------------------------------------------------------------------------------------------
// версия ПО
//--------------------------------------------------------------------------------------------------------------------------------
#define SOFTWARE_VERSION "ver.2022.10.08WEB01"  

//--------------------------------------------------------------------------------------------------------------------------------
// настройки Serial. Настройки для общения через UART
//--------------------------------------------------------------------------------------------------------------------------------
#define SerialDEBUG                  Serial    // какой Serial использовать для работы с программой UROVConfig.exe
#define Serial_SPEED                 115200    // скорость работы с Serial
#define BUFFER_SIZE                     128    // Размер буфера входящих сообщений
//--------------------------------------------------------------------------------------------------------------------------------
#define _DEBUG // закомментировать для выключения отладочной информации
//--------------------------------------------------------------------------------------------------------------------------------
#define DATA_MEASURE_THRESHOLD                      1000    // через сколько миллисекунд обновлять показания с линий вольтажа (и часов)
#define VOLTAGE_THRESHOLD                             15    // порог изменений, в процентах, для принятия решения о том, хороший вольтаж или нет
//--------------------------------------------------------------------------------------------------------------------------------
//#define _WIFI_COMMANDS_OFF                                 // Поключить WiFi и WEB интерфейс
//--------------------------------------------------------------------------------------------------------------------------------
#define  _COM_COMMANDS_OFF                                 // Подключить прием команд по КОМ порту
//--------------------------------------------------------------------------------------------------------------------------------

#define TOUCH_IRQ 13


//--------------------------------------------------------------------------------------------------------------------------------
// Настройка датчиков
//--------------------------------------------------------------------------------------------------------------------------------
#define SENSOR_PIN 36                 // GPIO36, вход датчика давления
//#define SENSOR_PIN 33                 // GPIO36, вход датчика давления

//#define ENABLE_CALIBRATION_AT_START // включить ли калибровку при старте, если она ещё не была сделана?

//--------------------------------------------------------------------------------------------------------------------------------
// Настройка подсветки дисплея
//--------------------------------------------------------------------------------------------------------------------------------
#define LCD_LED 16                   // GPIO16
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Настройки пищалки
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#define USE_BUZZER                   // раскомментировать, если надо использовать пищалку для звуков при нажатии кнопок TFT-экрана
#define BUZZER_DURATION  60000       // сколько микросекунд включать пищалку
#define BUZZER_PIN       26          // GPIO26 пин, на котором висит пищалка (актуально при раскомментированной команде USE_BUZZER)
#define BUZZER_LEVEL   HIGH          // уровень для включения пищалки
//--------------------------------------------------------------------------------------------------------------------------------
// закомментировать, если не хотим использовать модуль реального времени (DS3231)
#define USE_DS3231_REALTIME_CLOCK
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// Настройка контроль аккумуляторов питания Показания умножить на 2
//--------------------------------------------------------------------------------------------------------------------------------
#define POWER_BATTERY      35        // аналоговый вход контроля заряда аккумулятора питания. 
#define BATTERY_CHARGE     34        // выход индикации контроллера заряда аккумулятора питания. 
#define SUPPLY12_CONNECTED 33        // GPIO33 вход контроля подключения внешнего источника 12 в для заряда аккумулятора питания. 
#define SUPPLY12_ON   "Зарядка"      // 
#define PULSE_PERIOD      300        // период формирования импульса заряда миллисекунд 
#define PULSE_DURATION    200        // длительность импульса заряда миллисекунд 


//--------------------------------------------------------------------------------------------------------------------------------
// Настройки включения питания одной кнопкой
//--------------------------------------------------------------------------------------------------------------------------------

#define POWER_ON_IN  32              // вход контроля подачи питания. 
#define POWER_ON_OUT 27              // Выход управления включения питания. 
//--------------------------------------------------------------------------------------------------------------------------------
//    Управление ключами опорного напряжения
//--------------------------------------------------------------------------------------------------------------------------------

#define KEY_REF_OFF 5               // Управление ключем блокировки упорного напряжения

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// время в миллисекундах, после которого идёт переключение на главный экран, если какой-то экран висит долгое время
#define RESET_TO_MAIN_SCREEN_DELAY 90000
// через какое время, в миллисекундах, гасить подсветку дисплея при питании от батарей
#define BACKLIGHT_OFF_DELAY          180  // секунд (3 минуты)
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#define TURN_POWER_OFF_DELAY        5000  // задержка выключения контроллера по нажатию кнопки выключения питания, миллисекунд
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#define TIME_POWER_OFF_DELAY         300  // задержка выключения питания 5 мин от аккумулятора, секунд
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#define CORRECT_DATA                  50  // признак корректного содержания данных                 



////--------------------------------------------------------------------------------------------------------------------------------
//// настройки EEPROM (МИНИМАЛЬНЫЙ ОБЪЁМ EEPROM - 16 Кб !!!)
////--------------------------------------------------------------------------------------------------------------------------------
///*
//ПОДДЕРЖИВАЕМЫЕ ТИПЫ ПАМЯТИ:
//
//  EEPROM_BUILTIN // встроенный EEPROM
//  EEPROM_AT24C32 // I2C-память AT24C32
//  EEPROM_AT24C64 // I2C-память AT24C64
//  EEPROM_AT24C128 // I2C-память AT24C128 - МИНИМАЛЬНЫЙ НЕОБХОДИМЫЙ ОБЪЁМ !!!
//  EEPROM_AT24C256 // I2C-память AT24C256
//  EEPROM_AT24C512 // I2C-память AT24C512
//*/
//#define EEPROM_USED_MEMORY EEPROM_AT24C128 // используем внешнюю память I2C AT24C128
//// если используется внешнняя память AT24C* - то ниже определяется индекс микросхемы. Например, китайский модуль часов реального времени
//// с DS3231 на борту имеет модуль памяти с адресом на шине I2C 0x57, т.е. индекс такого модуля - 7, т.к. базовый адрес памяти на шине - 
//// 0x50. Настройкой ниже можно указать адрес микросхемы памяти на шине I2C.
//#define EEPROM_MEMORY_INDEX 0



//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
// адреса хранения в EEPROM
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#define ControllerID_ADDRESS            10 // адрес хранения 
#define MeasureTime_ADDRESS             20 // адрес хранения  
#define CalibrationTime_ADDRESS         30 // адрес хранения  
#define S20_9_O2Value_ADDRESS           40 // адрес хранения  
#define S0_O2Value_ADDRESS              50 // адрес хранения  
#define Password_ADDRESS                60 // адрес хранения  
#define TimePassword_ADDRESS            80 // адрес хранения  
#define Atmosfera_ADDRESS              100 // адрес хранения  
#define TimeLedLCD_ADDRESS             110 // адрес хранения 
#define TimePowerOff_ADDRESS           120 // адрес хранения  
#define TftCalibrationData_ADDRESS     140 // адрес хранения  
#define Reference_voltage_ADDRESS      160 // адрес хранения  

#define WIFI_STATE_EEPROM_ADDR         200 // адрес хранения состояния Wi-Fi (коннектится к роутеру или нет), 1 байт
#define STATION_PASSWORD_EEPROM_ADDR   240 // адрес хранения пароля к точке ESP, 20 байт
#define STATION_ID_EEPROM_ADDR         280 // адрес хранения ID точки доступа ESP, 20 байт
#define ROUTER_PASSWORD_EEPROM_ADDR    320 // адрес хранения пароля к роутеру, 20 байт
#define ROUTER_ID_EEPROM_ADDR          360 // адрес хранение ID роутера, 20 байт


//--------------------------------------------------------------------------------------------------------------------------------
// Настройки значений по умолчанию
//--------------------------------------------------------------------------------------------------------------------------------
#define DEFAULT_CALIBRATION_TIME     60 // значение по умолчанию для времени калибровки
#define DEFAULT_MEASURE_TIME         30 // значение по умолчанию для времени измерения
#define MAX_PASSWORD_LENGTH           8 // максимальная длина вводимого пароля для доступа в сервисное меню
#define MENU_PASSWORD             "123" // пароль для доступа в сервисное меню по умолчанию
#define MASTER_PASSWORD         "14754" // мастер пароль для доступа во все меню
#define MAX_TIME_VALUE              300 // сколько секунд максимум для настроек времени измерений и калибровки
#define MAX_ATMOSFERA_LENGTH          4 // максимальная длина вводимого сигнала в воздухе согласно данных паспорта на датчик
#define ATMOSFERA_DEFAULT         "450" // Уровень сигнала мв в атмосфере по умолчанию
#define DEFAULT_ATMOSFERA_MS         10 // Уровень сигнала мв в 
#define MAX_TIME_LCD_LENGTH           4 // максимальная длина вводимого времени отключения подсветки дисплея
#define MAX_TIME_POWER_LENGTH         4 // максимальная длина вводимого времени отключения прибора
#define DEFAULT_ControllerID          1 // 
#define DEFAULT_Reference_voltage   440 // Уровень опорного напряжения мв
#define MAX_WIFI_LENGTH              20 // максимальная длина вводимого пароля для доступа в WiFi

//--------------------------------------------------------------------------------------------------------------------------------
// Настройки текста
//--------------------------------------------------------------------------------------------------------------------------------
#define WM_BACK_CAPTION "< НАЗАД"
#define WM_SAVE_CAPTION "СОХРАНИТЬ"
#define START_CAPTION "ПУСК"
#define MENU_CAPTION "СЕРВИСНОЕ МЕНЮ"
#define REPEAT_CAPTION "ПОВТОР"
#define CLEAR_CAPTION "СБРОС"
#define CAL_0_CAPTION "КАЛИБРОВКА 0%"
#define FREE_CAPTION "-----"
#define REF_CAPTION "ОПОРНОЕ НАПР."
#define MEASURE_TIME_CAPTION "ВРЕМЯ ИЗМЕРЕНИЯ"
#define CAL_TIME_CAPTION "ВРЕМЯ КАЛИБРОВКИ"
#define CAL_TIME_LCD_OFF "ОТКЛЮЧЕНИЕ LCD"
#define CAL_TIME_POWER_OFF "OTKЛ. ПРИБОРА"
#define STOP_CAPTION "СТОП"
#define CAL_CAPTION "КАЛИБРОВКА"
#define ENTER_CAPTION "ВВОД"
#define SET_DATA_TIME "УСТ.ДАТА/ВРЕМЯ"
#define SET_TIME "УСТ.ВРЕМЯ"
#define SET_DATA "УСТ.ДАТУ"
#define SET_FREE "СВОБОДЕН"
#define SET_KOEFF_PA "КОЕФФИЦИЕНТ Рa"


//--------------------------------------------------------------------------------------------------------------------------------
// экраны
//--------------------------------------------------------------------------------------------------------------------------------
#define USE_TFT_MODULE // закомментировать, если не нужна поддержка TFT


//--------------------------------------------------------------------------------------------------------------------------------
// настройки TFT (используется экран с разрешением 320x240)
//--------------------------------------------------------------------------------------------------------------------------------
// цвета для TFT
// цвета для кнопок: цвет текста, не выяснил ,цвет рамки не нажат, цвет рамки при нажатии ,цвет заполнения
//--------------------------------------------------------------------------------------------------------------------------------
#define TFT_BACK_COLOR TFT_WHITE                // цвет фона
#define TFT_BUTTON_COLORS TFT_WHITE, 0x8410, WHITE, 0xF800, 0x001F
#define TFT_BUTTON_COLORS_BLUE TFT_WHITE, TFT_GREEN, TFT_WHITE, TFT_RED, TFT_BLUE

#define TFT_FONT_COLOR 0x4A69                   // цвет шрифта по умолчанию
#define TFT_CHANNELS_BUTTON_COLORS 0x3A8D, 0xC618, 0x8410, 0xF800, 0xEF7D // цвета кнопок для каналов
#define INFO_BOX_BACK_COLOR 0x6161              // цвет фона для информационного бокса
#define INFO_BOX_BORDER_COLOR TFT_BLACK         // цвет рамки информационного бокса
#define INFO_BOX_CAPTION_COLOR 0x33D6           // цвет заголовка информационного бокса
#define SENSOR_BOX_FONT_COLOR TFT_WHITE         // цвет показаний датчика
#define SENSOR_BOX_UNIT_COLOR TFT_WHITE         // цвет единиц изменений датчика
#define MODE_ON_COLOR 0x0400                    // цвет "вкл", "авто"
#define MODE_OFF_COLOR 0x8000                   // цвет "выкл", "ручной"
#define CHANNELS_BUTTONS_TEXT_COLOR TFT_WHITE   // цвет текста кнопок каналов
#define CHANNELS_BUTTONS_BG_COLOR 0xEF7D        // цвет фона кнопок каналов
#define CHANNEL_BUTTONS_TEXT_COLOR 0x3A8D       // цвет текста кнопки одного канала
#define TIME_PART_FONT_COLOR 0x0410             // цвет текста кнопки установки компонента времени
#define TIME_PART_SELECTED_FONT_COLOR TFT_WHITE // цвет текста активной кнопки компонента времени
#define TIME_PART_BG_COLOR 0xEF7D               // цвет фона кнопки компонента времени
#define TIME_PART_SELECTED_BG_COLOR 0x0400      // цвет фона выбранной кнопки компонента времени
#define STATUS_ON_COLOR 0x07E0                  // цвет статусов на экране ожидания
//--------------------------------------------------------------------------------------------------------------------------------

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#ifdef _DEBUG
#define DBG(s) { Serial.print((s)); }
#define DBGLN(s) { Serial.print((s)); Serial.println(); }
#else
#define DBG(s) (void) 0
#define DBGLN(s) (void) 0
#endif
#define ENDL '\n'
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
//template <typename T> inline Stream& operator << (Stream& s, T n) { s.print(n); return s; }
//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#define CORE_COMMAND_GET F("GET=")             // префикс для команды получения данных из модуля LCD
#define CORE_COMMAND_SET F("SET=")             // префикс для команды сохранения данных в модуль LCD
#define CORE_COMMAND_ANSWER_OK F("OK ")       // какой префикс будет посылаться в ответ на команду получения данных и её успешной отработке
#define CORE_COMMAND_ANSWER_ERROR F("ERR ")   // какой префикс будет посылаться в ответ на команду получения данных и её неуспешной отработке
#define CORE_COMMAND_PARAM_DELIMITER '#'      // разделитель параметров
#define CORE_END_OF_DATA F("[END]")
#define CORE_COMMAND_DONE F("DONE")

//------------------------------------------------------------------------------------------------------------------------------------------------------------------------
